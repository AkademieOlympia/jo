History of jo
=============

I've designed or been a part of several JavaScript frameworks, and at this point
it's safe to say I'm addicted to making them.

jSugar (2005)
-------------

This JavaScript-only solution (seriously, no CSS at all) was born of two things:
a desire to make common application code for browser widgets and for desktop widgets
like Apple's _Dashboard_ and _Konfabulator_. The idea was, since they all used
JavaScript and some DOM-like structure (in _Dashboard's_ case the earliest build
of WebKit outside of a browser), users should be able to see something cool on a website,
and drag & drop it to their desktop for use outside the web. The Yahoo! platform team
was so impressed with it, they promptly put it on ice and didn't approve it for
open source distribution.

YUI (2006)
----------

And this library is why jSugar got the "end of _Raiders of the Lost Ark_" treatment.
YUI was and is a great application-centric framework, and I like to think that in
many small ways the prototypes I contributed during my stay at Yahoo! helped shape
its future. One of the things I borrowed from then on was the use of the
Observer Pattern in their custom event model.

Engage, Inc. (2007)
-------------------

I architected and wrote a proprietary framework at this now defunct dating startup
which used YUI core for its underpinnings. The widgets were lightweight, and it was
building this framework that I came to appreciate my "ListView" control. Essentially,
an array iterator class which has methods you override to display different sorts
of data. The base ListView class was used for many other UI widgets, including menus,
selectors, popups -- you name it.

Gobico (2008)
-------------

Originally developed for iPhone web apps, this very lightweight JavaScript framework
was geared for games, and more than a little iPhone-centric design-wise. This framework
was sort of an overcorrection towards "lightweight", and didn't earn its keep as much
as I would have liked.

Epocrates, Inc. (2009)
----------------------

During my stay, I worked with another engineer to come up with a WebKit-based JavaScript
framework for mobile devices. After a lot of experimentation, it became clear that
there really wasn't a great solution we could plug in, so we built it from the ground up.
I was focused on the overall architecture and the presentation side in particular. This
was some great work, especially the learning exercise of watching other developers (who
were mostly experts in Java and C) learn the framework and put together a large, complex
data-driven mobile application with it. It was a successful effort, and I learned a lot
about what was good and bad with my approach to larger-scale JavaScript application
development. The application was released for webOS and Android, but was also tested in
Safari and iPhone.

Grrok (2010)
------------

In my spare time, I continued to improve my Gobico framework, and a lot of ideas for the
work on Epocrates' framework came from this experimentation. I released two apps for
Palm webOS using this framework (Wobble Words and Poker Drops), which also worked on the
iPhone and Android 2.1 with very little porting effort. In fact, the apps ported in a
matter of hours using PhoneGap as a low-level API. This was a valuable exercise, because
working nicely with other frameworks is a good thing. This framework also completely
broke my interest in building widgets and dialog layouts in HTML. Even if I enhanced the
template framework, it's still such an ugly mess with an application any larger than
two views (Palm's Mojo framework also uses this approach, and I have equal distaste for
it).

jo (2010)
---------

Renamed, completely re-factored and re-architected, my pet JavaScript framework was born
again and ready to get contributions from other developers.

- - -

